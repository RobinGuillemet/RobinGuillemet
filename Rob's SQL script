-- Reopened restaurants table

    CREATE OR REPLACE TEMP TABLE tmp_returned AS
    SELECT date_key AS date_o
         , restaurant_zone_code
         , rs.restaurant_segment
         , rom.restaurant_id AS rx_id
         , iff(sum(open_mins_trimmed)> 10, 1, 0) AS was_open
         , max(was_open) OVER (PARTITION BY rx_id
                               ORDER BY date_o ASC ROWS BETWEEN 8 preceding AND 1 preceding) AS past_8days_open
                            , iff(was_open = 1
                                  AND past_8days_open = 0, 1, 0) AS is_returned
    FROM production.aggregate.restaurant_ops_metrics_hourly rom
    LEFT JOIN production.reference.restaurant_segmentation AS rs ON rom.restaurant_id = rs.restaurant_id
    AND rs.date_quarter = date_trunc(QUARTER, CURRENT_DATE)
    WHERE TRUE
        AND restaurant_country_name = 'France'
        AND datediff(days, date_key, CURRENT_DATE) < 17
    GROUP BY 1
           , 2
           , 3
           , 4
    ORDER BY 1;

-- Restaurants that were open >10mins

    CREATE OR REPLACE TEMP TABLE tmp_active AS
    SELECT date_trunc(WEEK, date_key) AS date_key
         , restaurant_id AS restaurant_id_active
         , iff(open_mins_trimmed>10, 1, 0) AS is_active
    FROM production.aggregate.restaurant_ops_metrics_hourly
    WHERE TRUE
        AND restaurant_country_name = 'France'
        AND restaurant_admin_status <> 'DISABLED'
        AND (datediff(WEEK, date_key, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_key) > '2021-10-01')
    GROUP BY 1
           , 2
           , 3;

-- ZONE LEVEL METRICS
 ---- OPEN

    CREATE OR REPLACE TEMP TABLE tmp_tracker_open AS
    SELECT date_trunc(WEEK, h.date_key) AS date_key
         , restaurant_zone_code AS zone_code
         , count(DISTINCT iff(open_mins_trimmed >10, h.restaurant_id, NULL)) cnt_open
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED'), h.restaurant_id, NULL)) AS cnt_live
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment IN ('1. G7', '2. Market Champion'), h.restaurant_id, NULL)) cnt_open_g25
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND sf_global_brand IN ('KFC', 'Burger King', 'McDonald\'s'), h.restaurant_id, NULL)) cnt_open_g3
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment LIKE '%Enterprise%%', h.restaurant_id, NULL)) cnt_open_enterprise
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '5. Local Gold', h.restaurant_id, NULL)) cnt_open_lg
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '6. Local Silver', h.restaurant_id, NULL)) cnt_open_ls
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '7. Local Bronze', h.restaurant_id, NULL)) cnt_open_lb
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '8. Newly Activated', h.restaurant_id, NULL)) cnt_open_new
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '0. ODC', h.restaurant_id, NULL)) cnt_open_convenience
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment IS NULL, h.restaurant_id, NULL)) cnt_open_noseg
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment IN ('1. G7', '2. Market Champion'), h.restaurant_id, NULL)) AS cnt_live_g25
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND sf_global_brand IN ('KFC', 'Burger King', 'McDonald\'s'), h.restaurant_id, NULL)) AS cnt_live_g3
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment LIKE '%Enterprise%%', h.restaurant_id, NULL)) AS cnt_live_enterprise
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '5. Local Gold', h.restaurant_id, NULL)) AS cnt_live_lg
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '6. Local Silver', h.restaurant_id, NULL)) AS cnt_live_ls
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '7. Local Bronze', h.restaurant_id, NULL)) AS cnt_live_lb
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '8. Newly Activated', h.restaurant_id, NULL)) AS cnt_live_new
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '0. ODC', h.restaurant_id, NULL)) AS cnt_live_convenience
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment IS NULL, h.restaurant_id, NULL)) AS cnt_live_noseg
         , sum(sessions_with_an_order)/nullif(sum(click_throughs), 0) AS menu_cvr
         , sum(open_mins_trimmed) / nullif(sum(scheduled_open_mins_trimmed), 0) AS open_pct
         , sum(iff(is_active = 1, open_mins_trimmed, NULL))/nullif(sum(iff(is_active = 1, scheduled_open_mins_trimmed, NULL)), 0) AS open_pct_active_rx
         , sum(iff(local_time_five_shifts='Lunch', cnt_orders_delivered_core+cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect, 0)) /nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_lunch_orders
         , count(DISTINCT iff(first_activation_date <'2020-03-16'
                              AND open_mins_trimmed>10, h.restaurant_id, NULL)) /nullif(count(DISTINCT iff(first_activation_date < '2020-03-16'
                                                                                                           AND restaurant_admin_status NOT IN ('DISABLED', 'DELETED'), h.restaurant_id, NULL)), 0) AS pct_open_rx_pc
         , sum(iff(restaurant_supplier_type_cbs = 'ODC', cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core, 0)) /nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_convenience --, SUM(CNT_ORDERS_DELIVERED_DISCOUNTED)/NULLIF(SUM(CNT_ORDERS_DELIVERED_M_PLUS+CNT_ORDERS_DELIVERED_CLICK_AND_COLLECT+CNT_ORDERS_DELIVERED_CORE),0) as pct_marketer

         , sum(iff(sf_virtual_brand, cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core, 0)) /nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_vb
         , sum(cnt_orders_delivered_click_and_collect)/nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_c_c
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND sf_virtual_brand, h.restaurant_id, NULL)) cnt_open_vb
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND is_convenience_groceries_tagged, h.restaurant_id, NULL)) cnt_open_odc
    FROM production.aggregate.restaurant_ops_metrics_hourly h
    LEFT JOIN production.reference.restaurant_segmentation AS rs ON h.restaurant_id = rs.restaurant_id
    AND rs.date_quarter = date_trunc(QUARTER, CURRENT_DATE)
    LEFT JOIN tmp_active a ON a.restaurant_id_active = h.restaurant_id
    AND a.date_key = h.date_key
    WHERE TRUE
        AND restaurant_country_name = 'France'
        AND restaurant_admin_status <> 'DISABLED'
        AND (datediff(WEEK, h.date_key, CURRENT_DATE) > 0
             AND date_trunc(WEEK, h.date_key) > '2021-10-01')
    GROUP BY 1
           , 2
    ORDER BY 2
           , 1;

-- OPS_

    CREATE OR REPLACE TEMP TABLE tmp_tracker_ops AS
    SELECT date_trunc(WEEK, start_of_period_local::DATE) AS date_key
         , zone_code
         , coalesce(nullif((coalesce(sum(sum_asap_restaurants), 0)),0) / nullif((coalesce(sum(cnt_sessions), 0)),0), 0) AS avg_asap_rx
         , (coalesce(sum(distance_restaurant_customer_sum), 0)) / nullif((coalesce(sum(distance_restaurant_customer_cnt), 0)), 0) AS avg_distance_r_to_c
         , (coalesce(sum(eod_mins_sum), 0)) / nullif((coalesce(sum(eod_mins_cnt), 0)), 0) AS avg_eod
         , sum(agg_zone_delivery_metrics_hourly.wait_time_past_target_time_mins_sum)/sum(agg_zone_delivery_metrics_hourly.wait_time_past_target_time_cnt) AS war_pt
         , sum(sum_rsr_not_visible)/nullif((sum(sum_asap_restaurants)+sum(sum_rsr_not_visible)),0) AS pct_rsr
         , sum(iff(dayname(start_of_period_local) IN ('Fri'), sum_rsr_not_visible, 0))/nullif((sum(iff(dayname(start_of_period_local) IN ('Fri'), sum_asap_restaurants + sum_rsr_not_visible, 0))),0) AS pct_rsr_fri
         , sum(iff(dayname(start_of_period_local) IN ('Sun'), sum_rsr_not_visible, 0))/nullif((sum(iff(dayname(start_of_period_local) IN ('Sun'), sum_asap_restaurants + sum_rsr_not_visible, 0))),0) AS pct_rsr_sun
         , sum(rain_orders_cnt)/nullif(sum(orders_delivered), 0) AS pct_rain
    FROM production.aggregate.agg_zone_delivery_metrics_hourly
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, start_of_period_local, CURRENT_DATE) > 0
             AND date_trunc(WEEK, start_of_period_local) > '2021-10-01')
    GROUP BY 1
           , 2;

-- MGMT

    CREATE OR REPLACE TEMP TABLE tmp_tracker_mgmt AS
    SELECT date_trunc(WEEK, period_date) AS date_key
         , zone_code
         , (coalesce(sum(CASE
                             WHEN country_name LIKE '%' THEN sum_operational_profit * exchange_rate
                             ELSE NULL
                         END), 0))/nullif((sum(iff(country_name LIKE '%', orders, 0))),0) AS oppo
         , (coalesce(sum(CASE
                             WHEN country_name LIKE '%' THEN sum_total_net_revenue * exchange_rate
                             ELSE NULL
                         END), 0))/nullif((sum(iff(country_name LIKE '%', orders, 0))),0) AS npo
         , (coalesce(sum(CASE
                             WHEN country_name LIKE '%' THEN sum_total_rider_cost * exchange_rate * exchange_rate
                             ELSE NULL
                         END), 0))/nullif((sum(iff(country_name LIKE '%', orders, 0))),0) AS cpo
         , (coalesce(sum(converted_sessions), 0))/nullif((coalesce(sum(sessions_platform_sessions), 0)),0) AS cvr
         , (coalesce(sum(sessions_platform_sessions), 0)) AS sessions --,(NULLIF(sum(cnt_b10_incidence),0))/NULLIF((NULLIF(sum(cnt_b10_denominator),0)),0) AS pct_B10_incidence
--,sum(CNT_B10_UNACCEPTABLE_LATE)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_ul
-- ,sum(CNT_B10_UNACCEPTABLE_LATE_5_TO_15)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_ul_late_5
--,sum(CNT_B10_UNACCEPTABLE_LATE_15_PLUS)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_ul_late_15
--,sum(CNT_B10_MISSING_ITEM)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_mi
-- ,sum(CNT_B10_REJECTION)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_rej
-- ,sum(CNT_B10_OMDNR)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_OMDNR
-- ,sum(CNT_B10_CANCELLATION)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_can
--,SUM(NC_SESSIONS) as sum_nc_sessions
--,SUM(EC_SESSIONS) as sum_ec_sessions
--, sum(NC_CONVERTED_SESSIONS)/NULLIF(sum_nc_sessions,0) as nc_cvr
--, sum(EC_CONVERTED_SESSIONS)/NULLIF(sum_ec_sessions,0) as ec_cvr

         , sum(orders) AS orders_delivered
         , sum(sum_order_value)/orders_delivered AS aov
         , SUM (sum_net_commission_revenue)/orders_delivered AS comm
             , comm/aov AS comm_pct
             , sum(sum_net_delivery_fee)/orders_delivered AS avg_delivery_fee_revenue
             , sum(sum_total_refund_inc_rpa)/orders_delivered AS avg_refund
             , sum(plus_active_subscribers) AS plus_subscribers
             , SUM (plus_new_subscribers) AS new_plus_subscribers
    FROM production.aggregate.zone_day_mgmt_report
    WHERE TRUE
        AND country_name = 'France'
        AND zone_code <> 'Unknown'
        AND (datediff(WEEK, period_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, period_date) > '2021-11-01')
    GROUP BY 1
           , 2;

-- PMF

    CREATE OR REPLACE TEMP TABLE tmp_tracker_pmf AS
    SELECT date_trunc(WEEK, date_hour_local::DATE) AS date_key
         , zone_code
         , sum(iff (SOURCE='DELIVEROO', rx_count * deliveroo_traffic, NULL)) / sum(iff(SOURCE='DELIVEROO', deliveroo_traffic, NULL)) AS pfm_roo_rx_seen
         , sum(iff (SOURCE='UBER', rx_count * deliveroo_traffic, NULL)) / sum(iff(SOURCE='UBER', deliveroo_traffic, NULL)) AS pmf_ue_rx_seen
         , avg(cuisine_diversity_pmf_score) AS cuisine_div
    FROM production.competitor.product_market_fit_hourly pmfh
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, date_hour_local, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_hour_local) > '2021-10-01')
    GROUP BY 1
           , 2
    ORDER BY 2
           , 1;

-- RETURNED Rx

    CREATE OR REPLACE TEMP TABLE tmp_tracker_returned AS
    SELECT date_trunc(WEEK, date_o) AS date_key
         , restaurant_zone_code
         , sum(is_returned) AS returned_rx
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment IN ('1. G7', '2. Market Champion'), 1, 0)) AS returned_g25
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment LIKE '%Enterprise%%', 1, 0)) AS returned_enterprise
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '5. Local Gold', 1, 0)) AS returned_lg
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '6. Local Silver', 1, 0)) AS returned_ls
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '7. Local Bronze', 1, 0)) AS returned_lb
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '8. Newly Activated', 1, 0)) AS returned_new
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '0. ODC', 1, 0)) AS returned_convenience
    FROM tmp_returned tr
    LEFT JOIN production.reference.restaurant_segmentation AS rs ON tr.rx_id = rs.restaurant_id
    AND rs.date_quarter = date_trunc(QUARTER, CURRENT_DATE)
    WHERE TRUE
    GROUP BY 1
           , 2
    ORDER BY 1;

--- Good Session Data

    CREATE OR REPLACE TEMP TABLE tmp_sessions_new AS
    SELECT date_trunc(WEEK, date_key) AS date_key
         , zone_code
         , count(*) AS sessions
         , sum(iff(is_converted_session, 1, 0))/nullif(sessions, 0) AS cvr
         , sum(iff(new_customer, 1, 0)) AS nc_sessions
         , sum(iff(new_customer, 0, 1)) AS ec_sessions
         , sum(iff(new_customer
                   AND is_converted_session, 1, 0))/nullif(nc_sessions, 0) AS nc_cvr
         , sum(iff(NOT new_customer
                   AND is_converted_session, 1, 0))/nullif(ec_sessions, 0) AS ec_cvr
    FROM production.sessions.consumer_sessions_combined
    WHERE TRUE
        AND country = 'France'
        AND zone_code NOT IN ('Unknown'
                            , '')
        AND (datediff(WEEK, date_key, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_key) > '2021-10-01')
    GROUP BY 1
           , 2;

-- other

    CREATE OR REPLACE TEMP TABLE tmp_other AS
    SELECT date_trunc(WEEK, order_date) AS date_key
         , zone_code
         , sum(iff(payment_card_type IN ('SWILE', 'SODEXO', 'EDENRED', 'UP', 'APETIZ'), 1, 0))/count(*) AS pct_tr
         , sum(iff(dayname(order_date) IN ('Mon', 'Tue', 'Wed', 'Thu'), 1, 0))/count(*) AS pct_week
         , sum(iff(dayname(order_date) IN ('Fri', 'Sat', 'Sun'), 1, 0))/count(*) AS pct_weekend
         , sum(iff(sf_global_brand IN ('McDonald\'s', 'Burger King', 'KFC'), 1, 0))/count(*) AS pct_g3
         , sum(iff(deliveroo_plus_order IN ('TRUE'), 1, 0))/count(*) AS plus
         , sum(iff(order_rank_user = '1', 1, 0))/count(*) AS new_customers
         , sum(iff(order_rank_user='1', 1, 0)) AS nc
         , COUNT (DISTINCT o.user_id) AS distinct_cx
               , COUNT (DISTINCT restaurant_id) AS distinct_rx
                     , sum(iff(wait_time_past_target > 5, 1, 0))/count(*) AS fivemins_pt
                     , AVG (delivery_fee) AS df_po
                         , sum(iff(promotion_type = 'NUX_Free_Delivery', 1, 0))/count(*) AS nux
                         , sum(iff(o.reason IS NOT NULL
                                   AND o.reason NOT IN ('refund', 'incorrect_food', 'goodwill', 'payment_issue', 'deliveroo_delay', 'driver_issue', 'redelivery', 'cold_food', 'packaging_issue', 'customer_disliked_food', 'restaurant_delay', 'fake_offer', 'voucher', 'crm_campaign', 'referrer'), 1, 0))/count(*) AS other_voucher
                         , sum(iff(o.marketing_debit_type IN ('voucher', 'marketing_action_link'), 1, 0))/count(*) AS main_voucher
                         , sum(iff(payment_card_type IN ('SWILE', 'SODEXO', 'EDENRED', 'UP', 'APETIZ'), 1, 0))/count(*) AS total_tr
                         , sum(iff(promotion_type IN('Free_Delivery_Marketplace', 'Free_Delivery_Core'), 1, 0))/count(*) AS fd
                         , sum(iff(is_marketer_order, 1, 0))/count(*) AS pct_marketer
                         , sum(iff(is_b10_amended_order, 1, 0))/count(*) AS pct_b10_amended
                         , sum(iff(is_b10_spoiled_food, 1, 0))/count(*) AS pct_b10_spoiled
    FROM production.denormalised.orders o
    LEFT JOIN production.miscellaneous.promotions p ON o.id = p.order_id
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, order_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, order_date) > '2021-10-01')
        AND status = 'DELIVERED'
    GROUP BY 1
           , 2;

-- sign ups

    CREATE OR REPLACE TEMP TABLE tmp_sign AS
    SELECT date_trunc(WEEK, first_contract_effective_date) AS date_key
         , restaurant_zone_code
         , count(DISTINCT iff(sf_global_brand ='KFC', restaurant_id, NULL)) AS kfc_launched
         , count(DISTINCT iff(sf_global_brand ='Burger King', restaurant_id, NULL)) AS bk_launched
         , count(DISTINCT iff(sf_global_brand ='McDonald\'s', restaurant_id, NULL)) AS mcdo_launched
    FROM production.reference.denormalised_restaurant_with_company AS denormalised_restaurant_with_company
    WHERE ((((denormalised_restaurant_with_company.first_contract_effective_date) >= ((dateadd('day', -28, date_trunc('week', date_trunc('day', convert_timezone('UTC', 'Europe/Paris', cast(current_timestamp() AS timestamp_ntz)))))))
             AND (denormalised_restaurant_with_company.first_contract_effective_date) < ((dateadd('day', 28, dateadd('day', -28, date_trunc('week', date_trunc('day', convert_timezone('UTC', 'Europe/Paris', cast(current_timestamp() AS timestamp_ntz)))))))))))
        AND ((upper(denormalised_restaurant_with_company.restaurant_country_name) = upper('France')))
        AND ((upper(CASE
                        WHEN denormalised_restaurant_with_company.status in ('CLOSED', 'OPEN', 'READY_TO_OPEN') THEN 'LIVE'
                        WHEN denormalised_restaurant_with_company.status in ('DISABLED') THEN 'DISABLED'
                        ELSE 'UNKNOWN'
                    END) = upper('LIVE')))
        AND ((upper(denormalised_restaurant_with_company.restaurant_country_name) LIKE upper('%')))
    GROUP BY 1
           , 2
    ORDER BY 2 DESC;

-- CROSS-ZONE BY CX ZONE

    CREATE OR REPLACE TEMP TABLE tmp_cx_cross_zone AS
    SELECT date_trunc(WEEK, order_date) AS date_key
         , customer_zone_code
         , sum(iff(cross_zone_delivery ='TRUE', 1, 0)) AS cx_cross_zone_ov
         , sum(iff(cross_zone_delivery ='FALSE', 1, 0)) AS cx_in_zone_ov
    FROM production.denormalised.orders
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, order_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, order_date) > '2021-10-01')
        AND status = 'DELIVERED'
    GROUP BY 1
           , 2
    ORDER BY 2;

-- CROSS-ZONE BY RX ZONE

    CREATE OR REPLACE TEMP TABLE tmp_rx_cross_zone AS
    SELECT date_trunc(WEEK, order_date) AS date_key
         , restaurant_zone_code
         , sum(iff(cross_zone_delivery ='TRUE', 1, 0)) AS rx_cross_zone_ov
         , sum(iff(cross_zone_delivery ='FALSE', 1, 0)) AS rx_in_zone_ov
    FROM production.denormalised.orders
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, order_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, order_date) > '2021-10-01')
        AND status = 'DELIVERED'
    GROUP BY 1
           , 2
    ORDER BY 2 ;

----MGNT V2

    CREATE OR REPLACE TEMP TABLE tmp_tracker_mgmt_v2 AS
    SELECT date_trunc(WEEK, date_value_day) AS date_key
         , zone_code
         , (nullif(sum(cnt_b10_incidence), 0))/nullif((nullif(sum(cnt_b10_denominator), 0)),0) AS pct_b10_incidence
         , sum(cnt_b10_unacceptable_late)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_ul
         , sum(cnt_b10_unacceptable_late_5_to_15)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_ul_late_5
         , sum(cnt_b10_unacceptable_late_15_plus)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_ul_late_15
         , sum(cnt_b10_missing_item)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_mi
         , sum(cnt_b10_rejection)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_rej
         , sum(cnt_b10_omdnr)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_omdnr
         , sum(cnt_b10_cancellation)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_can
    FROM production.aggregate.mgmt_report_zone_day_metrics
    WHERE TRUE
        AND country_name = 'France'
        AND zone_code <> 'Unknown'
        AND (datediff(WEEK, date_value_day, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_value_day) > '2021-10-01')
    GROUP BY 1
           , 2;

-- Hub REGIONAL FRANCE - EXPANSION
 ---- OPEN

    CREATE OR REPLACE TEMP TABLE tmp_tracker_open_ex AS
    SELECT date_trunc(WEEK, h.date_key) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , count(DISTINCT iff(open_mins_trimmed >10, h.restaurant_id, NULL)) cnt_open
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED'), h.restaurant_id, NULL)) AS cnt_live
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment IN ('1. G7', '2. Market Champion'), h.restaurant_id, NULL)) cnt_open_g25
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND sf_global_brand IN ('KFC', 'Burger King', 'McDonald\'s'), h.restaurant_id, NULL)) cnt_open_g3
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment LIKE '%Enterprise%%', h.restaurant_id, NULL)) cnt_open_enterprise
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '5. Local Gold', h.restaurant_id, NULL)) cnt_open_lg
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '6. Local Silver', h.restaurant_id, NULL)) cnt_open_ls
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '7. Local Bronze', h.restaurant_id, NULL)) cnt_open_lb
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '8. Newly Activated', h.restaurant_id, NULL)) cnt_open_new
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment = '0. ODC', h.restaurant_id, NULL)) cnt_open_convenience
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND rs.restaurant_segment IS NULL, h.restaurant_id, NULL)) cnt_open_noseg
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment IN ('1. G7', '2. Market Champion'), h.restaurant_id, NULL)) AS cnt_live_g25
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND sf_global_brand IN ('KFC', 'Burger King', 'McDonald\'s'), h.restaurant_id, NULL)) AS cnt_live_g3
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment LIKE '%Enterprise%%', h.restaurant_id, NULL)) AS cnt_live_enterprise
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '5. Local Gold', h.restaurant_id, NULL)) AS cnt_live_lg
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '6. Local Silver', h.restaurant_id, NULL)) AS cnt_live_ls
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '7. Local Bronze', h.restaurant_id, NULL)) AS cnt_live_lb
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '8. Newly Activated', h.restaurant_id, NULL)) AS cnt_live_new
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment = '0. ODC', h.restaurant_id, NULL)) AS cnt_live_convenience
         , count(DISTINCT iff(restaurant_admin_status NOT IN ('DISABLED', 'DELETED')
                              AND rs.restaurant_segment IS NULL, h.restaurant_id, NULL)) AS cnt_live_noseg
         , sum(sessions_with_an_order)/nullif(sum(click_throughs), 0) AS menu_cvr
         , sum(open_mins_trimmed) / nullif(sum(scheduled_open_mins_trimmed), 0) AS open_pct
         , sum(iff(is_active = 1, open_mins_trimmed, NULL))/nullif(sum(iff(is_active = 1, scheduled_open_mins_trimmed, NULL)), 0) AS open_pct_active_rx
         , sum(iff(local_time_five_shifts='Lunch', cnt_orders_delivered_core+cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect, 0)) /nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_lunch_orders
         , count(DISTINCT iff(first_activation_date <'2020-03-16'
                              AND open_mins_trimmed>10, h.restaurant_id, NULL)) /nullif(count(DISTINCT iff(first_activation_date < '2020-03-16'
                                                                                                           AND restaurant_admin_status NOT IN ('DISABLED', 'DELETED'), h.restaurant_id, NULL)), 0) AS pct_open_rx_pc
         , sum(iff(restaurant_supplier_type_cbs = 'ODC', cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core, 0)) /nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_convenience --, SUM(CNT_ORDERS_DELIVERED_DISCOUNTED)/NULLIF(SUM(CNT_ORDERS_DELIVERED_M_PLUS+CNT_ORDERS_DELIVERED_CLICK_AND_COLLECT+CNT_ORDERS_DELIVERED_CORE),0) as pct_marketer

         , sum(iff(sf_virtual_brand, cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core, 0)) /nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_vb
         , sum(cnt_orders_delivered_click_and_collect)/nullif(sum(cnt_orders_delivered_m_plus+cnt_orders_delivered_click_and_collect+cnt_orders_delivered_core), 0) AS pct_c_c
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND sf_virtual_brand, h.restaurant_id, NULL)) cnt_open_vb
         , count(DISTINCT iff(open_mins_trimmed >10
                              AND is_convenience_groceries_tagged, h.restaurant_id, NULL)) cnt_open_odc
    FROM production.aggregate.restaurant_ops_metrics_hourly h
    LEFT JOIN production.reference.restaurant_segmentation AS rs ON h.restaurant_id = rs.restaurant_id
    AND rs.date_quarter = date_trunc(QUARTER, CURRENT_DATE)
    LEFT JOIN tmp_active a ON a.restaurant_id_active = h.restaurant_id
    AND a.date_key = h.date_key
    WHERE TRUE
        AND restaurant_country_name = 'France'
        AND restaurant_admin_status <> 'DISABLED'
        AND (datediff(WEEK, h.date_key, CURRENT_DATE) > 0
             AND date_trunc(WEEK, h.date_key) > '2021-10-01')
        AND restaurant_zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2
    ORDER BY 2
           , 1;

-- OPS_

    CREATE OR REPLACE TEMP TABLE tmp_tracker_ops_ex AS
    SELECT date_trunc(WEEK, start_of_period_local::DATE) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , coalesce(nullif((coalesce(sum(sum_asap_restaurants), 0)),0) / nullif((coalesce(sum(cnt_sessions), 0)),0), 0) AS avg_asap_rx
         , (coalesce(sum(distance_restaurant_customer_sum), 0)) / nullif((coalesce(sum(distance_restaurant_customer_cnt), 0)), 0) AS avg_distance_r_to_c
         , (coalesce(sum(eod_mins_sum), 0)) / nullif((coalesce(sum(eod_mins_cnt), 0)), 0) AS avg_eod
         , sum(agg_zone_delivery_metrics_hourly.wait_time_past_target_time_mins_sum)/sum(agg_zone_delivery_metrics_hourly.wait_time_past_target_time_cnt) AS war_pt
         , sum(sum_rsr_not_visible)/nullif((sum(sum_asap_restaurants)+sum(sum_rsr_not_visible)),0) AS pct_rsr
         , sum(iff(dayname(start_of_period_local) IN ('Fri'), sum_rsr_not_visible, 0))/nullif((sum(iff(dayname(start_of_period_local) IN ('Fri'), sum_asap_restaurants + sum_rsr_not_visible, 0))),0) AS pct_rsr_fri
         , sum(iff(dayname(start_of_period_local) IN ('Sun'), sum_rsr_not_visible, 0))/nullif((sum(iff(dayname(start_of_period_local) IN ('Sun'), sum_asap_restaurants + sum_rsr_not_visible, 0))),0) AS pct_rsr_sun
         , sum(rain_orders_cnt)/nullif(sum(orders_delivered), 0) AS pct_rain
    FROM production.aggregate.agg_zone_delivery_metrics_hourly
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, start_of_period_local, CURRENT_DATE) > 0
             AND date_trunc(WEEK, start_of_period_local) > '2021-10-01')
        AND zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2;

-- MGMT

    CREATE OR REPLACE TEMP TABLE tmp_tracker_mgmt_ex AS
    SELECT date_trunc(WEEK, period_date) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , (coalesce(sum(CASE
                             WHEN country_name LIKE '%' THEN sum_operational_profit * exchange_rate
                             ELSE NULL
                         END), 0))/nullif((sum(iff(country_name LIKE '%', orders, 0))),0) AS oppo
         , (coalesce(sum(CASE
                             WHEN country_name LIKE '%' THEN sum_total_net_revenue * exchange_rate
                             ELSE NULL
                         END), 0))/nullif((sum(iff(country_name LIKE '%', orders, 0))),0) AS npo
         , (coalesce(sum(CASE
                             WHEN country_name LIKE '%' THEN sum_total_rider_cost * exchange_rate * exchange_rate
                             ELSE NULL
                         END), 0))/nullif((sum(iff(country_name LIKE '%', orders, 0))),0) AS cpo
         , (coalesce(sum(converted_sessions), 0))/nullif((coalesce(sum(sessions_platform_sessions), 0)),0) AS cvr
         , (coalesce(sum(sessions_platform_sessions), 0)) AS sessions --,(NULLIF(sum(cnt_b10_incidence),0))/NULLIF((NULLIF(sum(cnt_b10_denominator),0)),0) AS pct_B10_incidence
--,sum(CNT_B10_UNACCEPTABLE_LATE)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_ul
--,sum(CNT_B10_UNACCEPTABLE_LATE_5_TO_15)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_ul_late_5
--,sum(CNT_B10_UNACCEPTABLE_LATE_15_PLUS)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_ul_late_15
--,sum(CNT_B10_MISSING_ITEM)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_mi
--,sum(CNT_B10_REJECTION)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_rej
--,sum(CNT_B10_OMDNR)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_OMDNR
--,sum(CNT_B10_CANCELLATION)/nullif((COALESCE(SUM(cnt_b10_denominator), 0)),0) AS pct_B10_can
--,SUM(NC_SESSIONS) as sum_nc_sessions
--,SUM(EC_SESSIONS) as sum_ec_sessions
--, sum(NC_CONVERTED_SESSIONS)/NULLIF(sum_nc_sessions,0) as nc_cvr
--, sum(EC_CONVERTED_SESSIONS)/NULLIF(sum_ec_sessions,0) as ec_cvr

         , sum(orders) AS orders_delivered
         , sum(sum_order_value)/orders_delivered AS aov
         , SUM (sum_net_commission_revenue)/orders_delivered AS comm
             , comm/aov AS comm_pct
             , sum(sum_net_delivery_fee)/orders_delivered AS avg_delivery_fee_revenue
             , sum(sum_total_refund_inc_rpa)/orders_delivered AS avg_refund
             , sum(plus_active_subscribers) AS plus_subscribers
             , SUM (plus_new_subscribers) AS new_plus_subscribers
    FROM production.aggregate.zone_day_mgmt_report
    WHERE TRUE
        AND country_name = 'France'
        AND zone_code <> 'Unknown'
        AND (datediff(WEEK, period_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, period_date) > '2021-10-01')
        AND zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2;

-- PMF

    CREATE OR REPLACE TEMP TABLE tmp_tracker_pmf_ex AS
    SELECT date_trunc(WEEK, date_hour_local::DATE) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , sum(iff (SOURCE='DELIVEROO', rx_count * deliveroo_traffic, NULL)) / sum(iff(SOURCE='DELIVEROO', deliveroo_traffic, NULL)) AS pfm_roo_rx_seen
         , sum(iff (SOURCE='UBER', rx_count * deliveroo_traffic, NULL)) / sum(iff(SOURCE='UBER', deliveroo_traffic, NULL)) AS pmf_ue_rx_seen
         , avg(cuisine_diversity_pmf_score) AS cuisine_div
    FROM production.competitor.product_market_fit_hourly pmfh
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, date_hour_local, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_hour_local) > '2021-10-01')
        AND zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2
    ORDER BY 2
           , 1;

-- RETURNED Rx

    CREATE OR REPLACE TEMP TABLE tmp_tracker_returned_ex AS
    SELECT date_trunc(WEEK, date_o) AS date_key
         , 'Regional France - Expansion' AS restaurant_zone_code
         , sum(is_returned) AS returned_rx
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment IN ('1. G7', '2. Market Champion'), 1, 0)) AS returned_g25
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment LIKE '%Enterprise%%', 1, 0)) AS returned_enterprise
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '5. Local Gold', 1, 0)) AS returned_lg
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '6. Local Silver', 1, 0)) AS returned_ls
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '7. Local Bronze', 1, 0)) AS returned_lb
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '8. Newly Activated', 1, 0)) AS returned_new
         , sum(iff(is_returned=1
                   AND rs.restaurant_segment = '0. ODC', 1, 0)) AS returned_convenience
    FROM tmp_returned tr
    LEFT JOIN production.reference.restaurant_segmentation AS rs ON tr.rx_id = rs.restaurant_id
    AND rs.date_quarter = date_trunc(QUARTER, CURRENT_DATE)
    WHERE TRUE
        AND restaurant_zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2
    ORDER BY 1;

--- Good Session Data

    CREATE OR REPLACE TEMP TABLE tmp_sessions_new_ex AS
    SELECT date_trunc(WEEK, date_key) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , count(*) AS sessions
         , sum(iff(is_converted_session, 1, 0))/nullif(sessions, 0) AS cvr
         , sum(iff(new_customer, 1, 0)) AS nc_sessions
         , sum(iff(new_customer, 0, 1)) AS ec_sessions
         , sum(iff(new_customer
                   AND is_converted_session, 1, 0))/nullif(nc_sessions, 0) AS nc_cvr
         , sum(iff(NOT new_customer
                   AND is_converted_session, 1, 0))/nullif(ec_sessions, 0) AS ec_cvr
    FROM production.sessions.consumer_sessions_combined
    WHERE TRUE
        AND country = 'France'
        AND zone_code NOT IN ('Unknown'
                            , '')
        AND (datediff(WEEK, date_key, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_key) > '2021-10-01')
        AND zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2;

-- other

    CREATE OR REPLACE TEMP TABLE tmp_other_ex AS
    SELECT date_trunc(WEEK, order_date) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , sum(iff(payment_card_type IN ('SWILE', 'SODEXO', 'EDENRED', 'UP', 'APETIZ'), 1, 0))/count(*) AS pct_tr
         , sum(iff(dayname(order_date) IN ('Mon', 'Tue', 'Wed', 'Thu'), 1, 0))/count(*) AS pct_week
         , sum(iff(dayname(order_date) IN ('Fri', 'Sat', 'Sun'), 1, 0))/count(*) AS pct_weekend
         , sum(iff(sf_global_brand IN ('McDonald\'s', 'Burger King', 'KFC'), 1, 0))/count(*) AS pct_g3
         , sum(iff(deliveroo_plus_order IN ('TRUE'), 1, 0))/count(*) AS plus
         , sum(iff(order_rank_user = '1', 1, 0))/count(*) AS new_customers
         , sum(iff(order_rank_user='1', 1, 0)) AS nc
         , COUNT (DISTINCT o.user_id) AS distinct_cx
               , COUNT (DISTINCT restaurant_id) AS distinct_rx
                     , sum(iff(wait_time_past_target > 5, 1, 0))/count(*) AS fivemins_pt
                     , AVG (delivery_fee) AS df_po
                         , sum(iff(promotion_type = 'NUX_Free_Delivery', 1, 0))/count(*) AS nux
                         , sum(iff(o.reason IS NOT NULL
                                   AND o.reason NOT IN ('refund', 'incorrect_food', 'goodwill', 'payment_issue', 'deliveroo_delay', 'driver_issue', 'redelivery', 'cold_food', 'packaging_issue', 'customer_disliked_food', 'restaurant_delay', 'fake_offer', 'voucher', 'crm_campaign', 'referrer'), 1, 0))/count(*) AS other_voucher
                         , sum(iff(o.marketing_debit_type IN ('voucher', 'marketing_action_link'), 1, 0))/count(*) AS main_voucher
                         , sum(iff(payment_card_type IN ('SWILE', 'SODEXO', 'EDENRED', 'UP', 'APETIZ'), 1, 0))/count(*) AS total_tr
                         , sum(iff(promotion_type IN('Free_Delivery_Marketplace', 'Free_Delivery_Core'), 1, 0))/count(*) AS fd
                         , sum(iff(is_marketer_order, 1, 0))/count(*) AS pct_marketer
                         , sum(iff(is_b10_amended_order, 1, 0))/count(*) AS pct_b10_amended
                         , sum(iff(is_b10_spoiled_food, 1, 0))/count(*) AS pct_b10_spoiled
    FROM production.denormalised.orders o
    LEFT JOIN production.miscellaneous.promotions p ON o.id = p.order_id
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, order_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, order_date) > '2021-10-01')
        AND zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
        AND status = 'DELIVERED'
    GROUP BY 1
           , 2;

-- sign ups

    CREATE OR REPLACE TEMP TABLE tmp_sign_ex AS
    SELECT date_trunc(WEEK, first_contract_effective_date) AS date_key
         , 'Regional France - Expansion' AS restaurant_zone_code
         , count(DISTINCT iff(sf_global_brand ='KFC', restaurant_id, NULL)) AS kfc_launched
         , count(DISTINCT iff(sf_global_brand ='Burger King', restaurant_id, NULL)) AS bk_launched
         , count(DISTINCT iff(sf_global_brand ='McDonald\'s', restaurant_id, NULL)) AS mcdo_launched
    FROM production.reference.denormalised_restaurant_with_company AS denormalised_restaurant_with_company
    WHERE ((((denormalised_restaurant_with_company.first_contract_effective_date) >= ((dateadd('day', -28, date_trunc('week', date_trunc('day', convert_timezone('UTC', 'Europe/Paris', cast(current_timestamp() AS timestamp_ntz)))))))
             AND (denormalised_restaurant_with_company.first_contract_effective_date) < ((dateadd('day', 28, dateadd('day', -28, date_trunc('week', date_trunc('day', convert_timezone('UTC', 'Europe/Paris', cast(current_timestamp() AS timestamp_ntz)))))))))))
        AND ((upper(denormalised_restaurant_with_company.restaurant_country_name) = upper('France')))
        AND ((upper(CASE
                        WHEN denormalised_restaurant_with_company.status in ('CLOSED', 'OPEN', 'READY_TO_OPEN') THEN 'LIVE'
                        WHEN denormalised_restaurant_with_company.status in ('DISABLED') THEN 'DISABLED'
                        ELSE 'UNKNOWN'
                    END) = upper('LIVE')))
        AND ((upper(denormalised_restaurant_with_company.restaurant_country_name) LIKE upper('%')))
        AND restaurant_zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2
    ORDER BY 2 DESC;

-- CROSS-ZONE BY CX ZONE

    CREATE OR REPLACE TEMP TABLE tmp_cx_cross_zone_ex AS
    SELECT date_trunc(WEEK, order_date) AS date_key
         , 'Regional France - Expansion' AS customer_zone_code
         , sum(iff(cross_zone_delivery ='TRUE', 1, 0)) AS cx_cross_zone_ov
         , sum(iff(cross_zone_delivery ='FALSE', 1, 0)) AS cx_in_zone_ov
    FROM production.denormalised.orders
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, order_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, order_date) > '2021-10-01')
        AND customer_zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
        AND status = 'DELIVERED'
    GROUP BY 1
           , 2
    ORDER BY 2;

-- CROSS-ZONE BY RX ZONE

    CREATE OR REPLACE TEMP TABLE tmp_rx_cross_zone_ex AS
    SELECT date_trunc(WEEK, order_date) AS date_key
         , 'Regional France - Expansion' AS restaurant_zone_code
         , sum(iff(cross_zone_delivery ='TRUE', 1, 0)) AS rx_cross_zone_ov
         , sum(iff(cross_zone_delivery ='FALSE', 1, 0)) AS rx_in_zone_ov
    FROM production.denormalised.orders
    WHERE TRUE
        AND country_name = 'France'
        AND (datediff(WEEK, order_date, CURRENT_DATE) > 0
             AND date_trunc(WEEK, order_date) > '2021-10-01')
        AND restaurant_zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
        AND status = 'DELIVERED'
    GROUP BY 1
           , 2
    ORDER BY 2 ;

--MGNT V2

    CREATE OR REPLACE TEMP TABLE tmp_tracker_mgmt_ex_v2 AS
    SELECT date_trunc(WEEK, date_value_day) AS date_key
         , 'Regional France - Expansion' AS zone_code
         , (nullif(sum(cnt_b10_incidence), 0))/nullif((nullif(sum(cnt_b10_denominator), 0)),0) AS pct_b10_incidence
         , sum(cnt_b10_unacceptable_late)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_ul
         , sum(cnt_b10_unacceptable_late_5_to_15)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_ul_late_5
         , sum(cnt_b10_unacceptable_late_15_plus)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_ul_late_15
         , sum(cnt_b10_missing_item)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_mi
         , sum(cnt_b10_rejection)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_rej
         , sum(cnt_b10_omdnr)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_omdnr
         , sum(cnt_b10_cancellation)/nullif((coalesce(sum(cnt_b10_denominator), 0)),0) AS pct_b10_can
    FROM production.aggregate.mgmt_report_zone_day_metrics
    WHERE TRUE
        AND country_name = 'France'
        AND zone_code <> 'Unknown'
        AND (datediff(WEEK, date_value_day, CURRENT_DATE) > 0
             AND date_trunc(WEEK, date_value_day) > '2021-10-01')
        AND zone_code IN
            (SELECT DISTINCT zone_code
             FROM production.reference.zone_city_country
             WHERE large_city_region = 'Regional France - Expansion')
    GROUP BY 1
           , 2;

DESC TABLE production.reference.denormalised_restaurant_with_company;


    CREATE OR REPLACE TEMP TABLE tmp_all_tracker AS
    SELECT ttm.date_key
         , ttm.zone_code
         , open_pct
         , avg_asap_rx
         , cnt_open
         , cnt_live
         , cnt_open_g25
         , cnt_open_g3
         , cnt_open_enterprise
         , cnt_open_lg
         , cnt_open_ls
         , cnt_open_lb
         , cnt_open_new
         , cnt_open_convenience
         , cnt_open_noseg
         , cnt_live_g25
         , cnt_live_g3
         , cnt_live_enterprise
         , cnt_live_lg
         , cnt_live_ls
         , cnt_live_lb
         , cnt_live_new
         , cnt_live_convenience
         , cnt_live_noseg
         , avg_distance_r_to_c
         , orders_delivered
         , aov
         , comm
         , comm_pct
         , avg_delivery_fee_revenue
         , avg_refund
         , sn.sessions
         , sn.cvr
         , pct_b10_incidence
         , pct_b10_ul
         , pct_b10_ul_late_5
         , pct_b10_ul_late_15
         , pct_b10_mi
         , pct_b10_rej
         , pct_b10_omdnr
         , pct_b10_can
         , pct_b10_amended
         , pct_b10_spoiled
         , avg_eod
         , oppo
         , npo
         , cpo
         , pfm_roo_rx_seen
         , pmf_ue_rx_seen
         , menu_cvr
         , returned_rx
         , returned_g25
         , returned_enterprise
         , returned_lg
         , returned_ls
         , returned_lb
         , returned_new
         , returned_convenience
         , war_pt
         , sn.nc_sessions
         , sn.ec_sessions
         , sn.nc_cvr
         , sn.ec_cvr
         , open_pct_active_rx
         , pct_lunch_orders
         , pct_rsr
         , pct_open_rx_pc
         , pct_convenience
         , pct_marketer
         , pct_vb
         , pct_c_c
         , pct_tr
         , pct_week
         , pct_weekend
         , pct_g3
         , plus
         , new_customers
         , distinct_cx
         , distinct_rx
         , fivemins_pt -- , rx_signed

         , cuisine_div
         , df_po
         , plus_subscribers
         , new_plus_subscribers
         , pct_rsr_fri
         , pct_rsr_sun
         , pct_rain
         , kfc_launched
         , bk_launched
         , mcdo_launched
         , nux
         , other_voucher
         , main_voucher
         , total_tr
         , fd
         , cx_cross_zone_ov
         , cx_in_zone_ov
         , rx_cross_zone_ov
         , rx_in_zone_ov
         , nc
    FROM tmp_tracker_mgmt ttm
    LEFT JOIN tmp_tracker_open tto ON tto.date_key = ttm.date_key
    AND tto.zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_ops ttops ON ttops.date_key = ttm.date_key
    AND ttops.zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_pmf ttp ON ttp.date_key = ttm.date_key
    AND ttp.zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_returned r ON r.date_key = ttm.date_key
    AND r.restaurant_zone_code = ttm.zone_code
    LEFT JOIN tmp_sessions_new sn ON sn.date_key = ttm.date_key
    AND sn.zone_code = ttm.zone_code
    LEFT JOIN tmp_other o ON o.date_key = ttm.date_key
    AND o.zone_code = ttm.zone_code
    LEFT JOIN tmp_sign s ON s.date_key = ttm.date_key
    AND s.restaurant_zone_code = ttm.zone_code
    LEFT JOIN tmp_cx_cross_zone t ON t.date_key = ttm.date_key
    AND t.customer_zone_code = ttm.zone_code
    LEFT JOIN tmp_rx_cross_zone u ON u.date_key = ttm.date_key
    AND u.restaurant_zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_mgmt_v2 mngt2 ON mngt2.date_key = ttm.date_key
    AND mngt2.zone_code = ttm.zone_code
    ORDER BY 2
           , 1;

--Expansion Hub Level Join

    CREATE OR REPLACE TEMP TABLE tmp_all_tracker_ex AS
    SELECT ttm.date_key
         , ttm.zone_code
         , open_pct
         , avg_asap_rx
         , cnt_open
         , cnt_live
         , cnt_open_g25
         , cnt_open_g3
         , cnt_open_enterprise
         , cnt_open_lg
         , cnt_open_ls
         , cnt_open_lb
         , cnt_open_new
         , cnt_open_convenience
         , cnt_open_noseg
         , cnt_live_g25
         , cnt_live_g3
         , cnt_live_enterprise
         , cnt_live_lg
         , cnt_live_ls
         , cnt_live_lb
         , cnt_live_new
         , cnt_live_convenience
         , cnt_live_noseg
         , avg_distance_r_to_c
         , orders_delivered
         , aov
         , comm
         , comm_pct
         , avg_delivery_fee_revenue
         , avg_refund
         , sn.sessions
         , sn.cvr
         , pct_b10_incidence
         , pct_b10_ul
         , pct_b10_ul_late_5
         , pct_b10_ul_late_15
         , pct_b10_mi
         , pct_b10_rej
         , pct_b10_omdnr
         , pct_b10_can
         , pct_b10_amended
         , pct_b10_spoiled
         , avg_eod
         , oppo
         , npo
         , cpo
         , pfm_roo_rx_seen
         , pmf_ue_rx_seen
         , menu_cvr
         , returned_rx
         , returned_g25
         , returned_enterprise
         , returned_lg
         , returned_ls
         , returned_lb
         , returned_new
         , returned_convenience
         , war_pt
         , sn.nc_sessions
         , sn.ec_sessions
         , sn.nc_cvr
         , sn.ec_cvr
         , open_pct_active_rx
         , pct_lunch_orders
         , pct_rsr
         , pct_open_rx_pc
         , pct_convenience
         , pct_marketer
         , pct_vb
         , pct_c_c
         , pct_tr
         , pct_week
         , pct_weekend
         , pct_g3
         , plus
         , new_customers
         , distinct_cx
         , distinct_rx
         , fivemins_pt -- , rx_signed

         , cuisine_div
         , df_po
         , plus_subscribers
         , new_plus_subscribers
         , pct_rsr_fri
         , pct_rsr_sun
         , pct_rain
         , kfc_launched
         , bk_launched
         , mcdo_launched
         , nux
         , other_voucher
         , main_voucher
         , total_tr
         , fd
         , cx_cross_zone_ov
         , cx_in_zone_ov
         , rx_cross_zone_ov
         , rx_in_zone_ov
         , nc
    FROM tmp_tracker_mgmt_ex ttm
    LEFT JOIN tmp_tracker_open_ex tto ON tto.date_key = ttm.date_key
    AND tto.zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_ops_ex ttops ON ttops.date_key = ttm.date_key
    AND ttops.zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_pmf_ex ttp ON ttp.date_key = ttm.date_key
    AND ttp.zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_returned_ex r ON r.date_key = ttm.date_key
    AND r.restaurant_zone_code = ttm.zone_code
    LEFT JOIN tmp_sessions_new_ex sn ON sn.date_key = ttm.date_key
    AND sn.zone_code = ttm.zone_code
    LEFT JOIN tmp_other_ex o ON o.date_key = ttm.date_key
    AND o.zone_code = ttm.zone_code
    LEFT JOIN tmp_sign_ex s ON s.date_key = ttm.date_key
    AND s.restaurant_zone_code = ttm.zone_code
    LEFT JOIN tmp_cx_cross_zone_ex t ON t.date_key = ttm.date_key
    AND t.customer_zone_code = ttm.zone_code
    LEFT JOIN tmp_rx_cross_zone_ex u ON u.date_key = ttm.date_key
    AND u.restaurant_zone_code = ttm.zone_code
    LEFT JOIN tmp_tracker_mgmt_ex_v2 mngt2 ON mngt2.date_key = ttm.date_key
    AND mngt2.zone_code = ttm.zone_code
    ORDER BY 2
           , 1;

-- Final Output

    SELECT *
    FROM tmp_all_tracker
    UNION ALL
    SELECT *
    FROM tmp_all_tracker_ex ;
